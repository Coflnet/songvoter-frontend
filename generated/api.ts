/* tslint:disable */
/* eslint-disable */
/**
 * Songvoter
 * Songvoter
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CoflnetSongVoterDBModelsExternalSong
 */
export interface CoflnetSongVoterDBModelsExternalSong {
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsExternalSong
     */
    'id'?: number;
    /**
     * 
     * @type {CoflnetSongVoterDBModelsExternalSongPlatforms}
     * @memberof CoflnetSongVoterDBModelsExternalSong
     */
    'platform'?: CoflnetSongVoterDBModelsExternalSongPlatforms;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsExternalSong
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsExternalSong
     */
    'artist'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsExternalSong
     */
    'thumbnailUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsExternalSong
     */
    'externalId'?: string | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CoflnetSongVoterDBModelsExternalSongPlatforms = {
    Unkown: 'unkown',
    Youtube: 'youtube',
    Spotify: 'spotify'
} as const;

export type CoflnetSongVoterDBModelsExternalSongPlatforms = typeof CoflnetSongVoterDBModelsExternalSongPlatforms[keyof typeof CoflnetSongVoterDBModelsExternalSongPlatforms];


/**
 * 
 * @export
 * @interface CoflnetSongVoterDBModelsParty
 */
export interface CoflnetSongVoterDBModelsParty {
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsParty
     */
    'id'?: number;
    /**
     * 
     * @type {CoflnetSongVoterDBModelsUser}
     * @memberof CoflnetSongVoterDBModelsParty
     */
    'creator'?: CoflnetSongVoterDBModelsUser;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsParty
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<CoflnetSongVoterDBModelsUser>}
     * @memberof CoflnetSongVoterDBModelsParty
     */
    'members'?: Array<CoflnetSongVoterDBModelsUser> | null;
    /**
     * 
     * @type {Array<CoflnetSongVoterDBModelsPartySong>}
     * @memberof CoflnetSongVoterDBModelsParty
     */
    'songs'?: Array<CoflnetSongVoterDBModelsPartySong> | null;
}
/**
 * Maps a party to songs
 * @export
 * @interface CoflnetSongVoterDBModelsPartySong
 */
export interface CoflnetSongVoterDBModelsPartySong {
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'id'?: number;
    /**
     * 
     * @type {CoflnetSongVoterDBModelsParty}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'party'?: CoflnetSongVoterDBModelsParty;
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'partyId'?: number;
    /**
     * Who (and how many) upvoted this
     * @type {Array<CoflnetSongVoterDBModelsUser>}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'upVoters'?: Array<CoflnetSongVoterDBModelsUser> | null;
    /**
     * Who (and how many) downvoted this
     * @type {Array<CoflnetSongVoterDBModelsUser>}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'downVoters'?: Array<CoflnetSongVoterDBModelsUser> | null;
    /**
     * How often this song has been played already
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'playedTimes'?: number;
    /**
     * 
     * @type {CoflnetSongVoterDBModelsSong}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'song'?: CoflnetSongVoterDBModelsSong;
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsPartySong
     */
    'songId'?: number;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterDBModelsPlaylist
 */
export interface CoflnetSongVoterDBModelsPlaylist {
    /**
     * Gets or Sets Id
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsPlaylist
     */
    'id'?: number;
    /**
     * The id of the user owning this Playlist
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsPlaylist
     */
    'owner'?: number;
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsPlaylist
     */
    'title'?: string | null;
    /**
     * Gets or Sets Songs
     * @type {Array<CoflnetSongVoterDBModelsSong>}
     * @memberof CoflnetSongVoterDBModelsPlaylist
     */
    'songs'?: Array<CoflnetSongVoterDBModelsSong> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterDBModelsSong
 */
export interface CoflnetSongVoterDBModelsSong {
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsSong
     */
    'id'?: number;
    /**
     * The title/name of the song
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsSong
     */
    'title'?: string | null;
    /**
     * 
     * @type {Array<CoflnetSongVoterDBModelsExternalSong>}
     * @memberof CoflnetSongVoterDBModelsSong
     */
    'externalSongs'?: Array<CoflnetSongVoterDBModelsExternalSong> | null;
    /**
     * Plalists containing this song  here to autogenerate many-to-many table
     * @type {Array<CoflnetSongVoterDBModelsPlaylist>}
     * @memberof CoflnetSongVoterDBModelsSong
     */
    'playlists'?: Array<CoflnetSongVoterDBModelsPlaylist> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterDBModelsUser
 */
export interface CoflnetSongVoterDBModelsUser {
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterDBModelsUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsUser
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterDBModelsUser
     */
    'googleId'?: string | null;
    /**
     * 
     * @type {Array<CoflnetSongVoterDBModelsPartySong>}
     * @memberof CoflnetSongVoterDBModelsUser
     */
    'upvotes'?: Array<CoflnetSongVoterDBModelsPartySong> | null;
    /**
     * 
     * @type {Array<CoflnetSongVoterDBModelsPartySong>}
     * @memberof CoflnetSongVoterDBModelsUser
     */
    'downvotes'?: Array<CoflnetSongVoterDBModelsPartySong> | null;
    /**
     * 
     * @type {Array<CoflnetSongVoterDBModelsParty>}
     * @memberof CoflnetSongVoterDBModelsUser
     */
    'parties'?: Array<CoflnetSongVoterDBModelsParty> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsAuthToken
 */
export interface CoflnetSongVoterModelsAuthToken {
    /**
     * Gets or Sets Token
     * @type {string}
     * @memberof CoflnetSongVoterModelsAuthToken
     */
    'token'?: string | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsExternalSong
 */
export interface CoflnetSongVoterModelsExternalSong {
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'title'?: string | null;
    /**
     * Gets or Sets Artist
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'artist'?: string | null;
    /**
     * Gets or Sets Thumbnail
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'thumbnail'?: string | null;
    /**
     * Gets or Sets ExternalId
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'externalId': string;
    /**
     * 
     * @type {CoflnetSongVoterModelsExternalSongPlatformEnum}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'platform': CoflnetSongVoterModelsExternalSongPlatformEnum;
}


/**
 * The platform of this song
 * @export
 * @enum {string}
 */

export const CoflnetSongVoterModelsExternalSongPlatformEnum = {
    Youtube: 'youtube',
    Spotify: 'spotify'
} as const;

export type CoflnetSongVoterModelsExternalSongPlatformEnum = typeof CoflnetSongVoterModelsExternalSongPlatformEnum[keyof typeof CoflnetSongVoterModelsExternalSongPlatformEnum];


/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsPlayList
 */
export interface CoflnetSongVoterModelsPlayList {
    /**
     * Gets or Sets Id
     * @type {string}
     * @memberof CoflnetSongVoterModelsPlayList
     */
    'id'?: string | null;
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterModelsPlayList
     */
    'title'?: string | null;
    /**
     * Gets or Sets Songs
     * @type {Array<string>}
     * @memberof CoflnetSongVoterModelsPlayList
     */
    'songs'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsSong
 */
export interface CoflnetSongVoterModelsSong {
    /**
     * Gets or Sets Id
     * @type {string}
     * @memberof CoflnetSongVoterModelsSong
     */
    'id'?: string | null;
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterModelsSong
     */
    'title'?: string | null;
    /**
     * Gets or Sets Occurences
     * @type {Array<CoflnetSongVoterModelsExternalSong>}
     * @memberof CoflnetSongVoterModelsSong
     */
    'occurences'?: Array<CoflnetSongVoterModelsExternalSong> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsSongCreation
 */
export interface CoflnetSongVoterModelsSongCreation {
    /**
     * Gets or Sets ExternalId
     * @type {string}
     * @memberof CoflnetSongVoterModelsSongCreation
     */
    'externalId'?: string | null;
    /**
     * 
     * @type {CoflnetSongVoterModelsSongCreationPlatformEnum}
     * @memberof CoflnetSongVoterModelsSongCreation
     */
    'platform'?: CoflnetSongVoterModelsSongCreationPlatformEnum;
}


/**
 * The platform of this song
 * @export
 * @enum {string}
 */

export const CoflnetSongVoterModelsSongCreationPlatformEnum = {
    Youtube: 'youtube',
    Spotify: 'spotify'
} as const;

export type CoflnetSongVoterModelsSongCreationPlatformEnum = typeof CoflnetSongVoterModelsSongCreationPlatformEnum[keyof typeof CoflnetSongVoterModelsSongCreationPlatformEnum];



/**
 * AuthApiControllerImplApi - axios parameter creator
 * @export
 */
export const AuthApiControllerImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exchange a google identity token for a songvoter token
         * @summary Authenticate with google
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] The google identity token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGooglePost: async (coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthTestPost: async (coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DbDelete: async (coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/db`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DbPost: async (coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/db`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApiControllerImplApi - functional programming interface
 * @export
 */
export const AuthApiControllerImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiControllerImplApiAxiosParamCreator(configuration)
    return {
        /**
         * Exchange a google identity token for a songvoter token
         * @summary Authenticate with google
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] The google identity token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthGooglePost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsAuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthGooglePost(coflnetSongVoterModelsAuthToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthTestPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthTestPost(coflnetSongVoterModelsAuthToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DbDelete(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DbDelete(coflnetSongVoterModelsAuthToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DbPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DbPost(coflnetSongVoterModelsAuthToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApiControllerImplApi - factory interface
 * @export
 */
export const AuthApiControllerImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiControllerImplApiFp(configuration)
    return {
        /**
         * Exchange a google identity token for a songvoter token
         * @summary Authenticate with google
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] The google identity token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthGooglePost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: any): AxiosPromise<CoflnetSongVoterModelsAuthToken> {
            return localVarFp.v1AuthGooglePost(coflnetSongVoterModelsAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthTestPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: any): AxiosPromise<void> {
            return localVarFp.v1AuthTestPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DbDelete(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: any): AxiosPromise<void> {
            return localVarFp.v1DbDelete(coflnetSongVoterModelsAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DbPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: any): AxiosPromise<void> {
            return localVarFp.v1DbPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApiControllerImplApi - object-oriented interface
 * @export
 * @class AuthApiControllerImplApi
 * @extends {BaseAPI}
 */
export class AuthApiControllerImplApi extends BaseAPI {
    /**
     * Exchange a google identity token for a songvoter token
     * @summary Authenticate with google
     * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] The google identity token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public v1AuthGooglePost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).v1AuthGooglePost(coflnetSongVoterModelsAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public v1AuthTestPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).v1AuthTestPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public v1DbDelete(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).v1DbDelete(coflnetSongVoterModelsAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public v1DbPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).v1DbPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ListApiControllerImplApi - axios parameter creator
 * @export
 */
export const ListApiControllerImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get playlist for active user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a playList
         * @summary Find playlist by ID
         * @param {string} listId ID of list to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListsListIdGet: async (listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('v1ListsListIdGet', 'listId', listId)
            const localVarPath = `/v1/lists/{listId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new playlist
         * @param {CoflnetSongVoterModelsPlayList} [coflnetSongVoterModelsPlayList] An array of songIds to be added to the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListsPost: async (coflnetSongVoterModelsPlayList?: CoflnetSongVoterModelsPlayList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsPlayList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListApiControllerImplApi - functional programming interface
 * @export
 */
export const ListApiControllerImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListApiControllerImplApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get playlist for active user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoflnetSongVoterModelsPlayList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a playList
         * @summary Find playlist by ID
         * @param {string} listId ID of list to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListsListIdGet(listId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsPlayList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListsListIdGet(listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new playlist
         * @param {CoflnetSongVoterModelsPlayList} [coflnetSongVoterModelsPlayList] An array of songIds to be added to the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ListsPost(coflnetSongVoterModelsPlayList?: CoflnetSongVoterModelsPlayList, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsPlayList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ListsPost(coflnetSongVoterModelsPlayList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListApiControllerImplApi - factory interface
 * @export
 */
export const ListApiControllerImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListApiControllerImplApiFp(configuration)
    return {
        /**
         * 
         * @summary Get playlist for active user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListsGet(options?: any): AxiosPromise<Array<CoflnetSongVoterModelsPlayList>> {
            return localVarFp.v1ListsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a playList
         * @summary Find playlist by ID
         * @param {string} listId ID of list to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListsListIdGet(listId: string, options?: any): AxiosPromise<CoflnetSongVoterModelsPlayList> {
            return localVarFp.v1ListsListIdGet(listId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new playlist
         * @param {CoflnetSongVoterModelsPlayList} [coflnetSongVoterModelsPlayList] An array of songIds to be added to the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ListsPost(coflnetSongVoterModelsPlayList?: CoflnetSongVoterModelsPlayList, options?: any): AxiosPromise<CoflnetSongVoterModelsPlayList> {
            return localVarFp.v1ListsPost(coflnetSongVoterModelsPlayList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListApiControllerImplApi - object-oriented interface
 * @export
 * @class ListApiControllerImplApi
 * @extends {BaseAPI}
 */
export class ListApiControllerImplApi extends BaseAPI {
    /**
     * 
     * @summary Get playlist for active user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public v1ListsGet(options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).v1ListsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a playList
     * @summary Find playlist by ID
     * @param {string} listId ID of list to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public v1ListsListIdGet(listId: string, options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).v1ListsListIdGet(listId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new playlist
     * @param {CoflnetSongVoterModelsPlayList} [coflnetSongVoterModelsPlayList] An array of songIds to be added to the song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public v1ListsPost(coflnetSongVoterModelsPlayList?: CoflnetSongVoterModelsPlayList, options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).v1ListsPost(coflnetSongVoterModelsPlayList, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PartyApiControllerImplApi - axios parameter creator
 * @export
 */
export const PartyApiControllerImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary votes a song down so it is play later/not at all
         * @param {string} partyId ID of party
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdDownvoteSongIdPost: async (partyId: string, songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdDownvoteSongIdPost', 'partyId', partyId)
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('v1PartyPartyIdDownvoteSongIdPost', 'songId', songId)
            const localVarPath = `/v1/party/{partyId}/downvote/{songId}`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)))
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an invite link for a party
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdInviteLinkGet: async (partyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdInviteLinkGet', 'partyId', partyId)
            const localVarPath = `/v1/party/{partyId}/inviteLink`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invites a user to a party
         * @param {string} partyId ID of party to invite to
         * @param {string} userId ID of user to invite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdInviteUserIdPost: async (partyId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdInviteUserIdPost', 'partyId', partyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1PartyPartyIdInviteUserIdPost', 'userId', userId)
            const localVarPath = `/v1/party/{partyId}/invite/{userId}`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Joins a party
         * @param {string} partyId ID of party to join
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdJoinPost: async (partyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdJoinPost', 'partyId', partyId)
            const localVarPath = `/v1/party/{partyId}/join`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary kicks a user from a party
         * @param {string} partyId ID of party to leave
         * @param {string} userId ID of user to kick
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdKickUserIdPost: async (partyId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdKickUserIdPost', 'partyId', partyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('v1PartyPartyIdKickUserIdPost', 'userId', userId)
            const localVarPath = `/v1/party/{partyId}/kick/{userId}`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave a party
         * @param {string} partyId ID of party to leave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdLeavePost: async (partyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdLeavePost', 'partyId', partyId)
            const localVarPath = `/v1/party/{partyId}/leave`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets the next Song
         * @param {string} partyId ID of party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdNextSongGet: async (partyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdNextSongGet', 'partyId', partyId)
            const localVarPath = `/v1/party/{partyId}/nextSong`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resets the parties playing state
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdResetPost: async (partyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdResetPost', 'partyId', partyId)
            const localVarPath = `/v1/party/{partyId}/reset`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
         * @summary votes a song up so it is play sooner
         * @param {string} partyId ID of party
         * @param {string} songId ID of the song to upvote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdUpvoteSongIdPost: async (partyId: string, songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('v1PartyPartyIdUpvoteSongIdPost', 'partyId', partyId)
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('v1PartyPartyIdUpvoteSongIdPost', 'songId', songId)
            const localVarPath = `/v1/party/{partyId}/upvote/{songId}`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)))
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all parties of the curent user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartysGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/partys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartysPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/partys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartyApiControllerImplApi - functional programming interface
 * @export
 */
export const PartyApiControllerImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartyApiControllerImplApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary votes a song down so it is play later/not at all
         * @param {string} partyId ID of party
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdDownvoteSongIdPost(partyId: string, songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdDownvoteSongIdPost(partyId, songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates an invite link for a party
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdInviteLinkGet(partyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdInviteLinkGet(partyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invites a user to a party
         * @param {string} partyId ID of party to invite to
         * @param {string} userId ID of user to invite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdInviteUserIdPost(partyId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdInviteUserIdPost(partyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Joins a party
         * @param {string} partyId ID of party to join
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdJoinPost(partyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdJoinPost(partyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary kicks a user from a party
         * @param {string} partyId ID of party to leave
         * @param {string} userId ID of user to kick
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdKickUserIdPost(partyId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdKickUserIdPost(partyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leave a party
         * @param {string} partyId ID of party to leave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdLeavePost(partyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdLeavePost(partyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary gets the next Song
         * @param {string} partyId ID of party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdNextSongGet(partyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterDBModelsSong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdNextSongGet(partyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary resets the parties playing state
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdResetPost(partyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdResetPost(partyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
         * @summary votes a song up so it is play sooner
         * @param {string} partyId ID of party
         * @param {string} songId ID of the song to upvote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartyPartyIdUpvoteSongIdPost(partyId: string, songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartyPartyIdUpvoteSongIdPost(partyId, songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all parties of the curent user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartysGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoflnetSongVoterDBModelsParty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartysGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PartysPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterDBModelsParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PartysPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartyApiControllerImplApi - factory interface
 * @export
 */
export const PartyApiControllerImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartyApiControllerImplApiFp(configuration)
    return {
        /**
         * 
         * @summary votes a song down so it is play later/not at all
         * @param {string} partyId ID of party
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdDownvoteSongIdPost(partyId: string, songId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1PartyPartyIdDownvoteSongIdPost(partyId, songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an invite link for a party
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdInviteLinkGet(partyId: string, options?: any): AxiosPromise<string> {
            return localVarFp.v1PartyPartyIdInviteLinkGet(partyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invites a user to a party
         * @param {string} partyId ID of party to invite to
         * @param {string} userId ID of user to invite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdInviteUserIdPost(partyId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1PartyPartyIdInviteUserIdPost(partyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Joins a party
         * @param {string} partyId ID of party to join
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdJoinPost(partyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1PartyPartyIdJoinPost(partyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary kicks a user from a party
         * @param {string} partyId ID of party to leave
         * @param {string} userId ID of user to kick
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdKickUserIdPost(partyId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1PartyPartyIdKickUserIdPost(partyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave a party
         * @param {string} partyId ID of party to leave
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdLeavePost(partyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1PartyPartyIdLeavePost(partyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets the next Song
         * @param {string} partyId ID of party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdNextSongGet(partyId: string, options?: any): AxiosPromise<CoflnetSongVoterDBModelsSong> {
            return localVarFp.v1PartyPartyIdNextSongGet(partyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary resets the parties playing state
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdResetPost(partyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1PartyPartyIdResetPost(partyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
         * @summary votes a song up so it is play sooner
         * @param {string} partyId ID of party
         * @param {string} songId ID of the song to upvote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartyPartyIdUpvoteSongIdPost(partyId: string, songId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1PartyPartyIdUpvoteSongIdPost(partyId, songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all parties of the curent user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartysGet(options?: any): AxiosPromise<Array<CoflnetSongVoterDBModelsParty>> {
            return localVarFp.v1PartysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PartysPost(options?: any): AxiosPromise<CoflnetSongVoterDBModelsParty> {
            return localVarFp.v1PartysPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartyApiControllerImplApi - object-oriented interface
 * @export
 * @class PartyApiControllerImplApi
 * @extends {BaseAPI}
 */
export class PartyApiControllerImplApi extends BaseAPI {
    /**
     * 
     * @summary votes a song down so it is play later/not at all
     * @param {string} partyId ID of party
     * @param {string} songId ID of the song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdDownvoteSongIdPost(partyId: string, songId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdDownvoteSongIdPost(partyId, songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an invite link for a party
     * @param {string} partyId ID of party to invite to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdInviteLinkGet(partyId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdInviteLinkGet(partyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invites a user to a party
     * @param {string} partyId ID of party to invite to
     * @param {string} userId ID of user to invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdInviteUserIdPost(partyId: string, userId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdInviteUserIdPost(partyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Joins a party
     * @param {string} partyId ID of party to join
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdJoinPost(partyId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdJoinPost(partyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary kicks a user from a party
     * @param {string} partyId ID of party to leave
     * @param {string} userId ID of user to kick
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdKickUserIdPost(partyId: string, userId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdKickUserIdPost(partyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave a party
     * @param {string} partyId ID of party to leave
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdLeavePost(partyId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdLeavePost(partyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary gets the next Song
     * @param {string} partyId ID of party
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdNextSongGet(partyId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdNextSongGet(partyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary resets the parties playing state
     * @param {string} partyId ID of party to invite to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdResetPost(partyId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdResetPost(partyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
     * @summary votes a song up so it is play sooner
     * @param {string} partyId ID of party
     * @param {string} songId ID of the song to upvote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartyPartyIdUpvoteSongIdPost(partyId: string, songId: string, options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartyPartyIdUpvoteSongIdPost(partyId, songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all parties of the curent user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartysGet(options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new party
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApiControllerImplApi
     */
    public v1PartysPost(options?: AxiosRequestConfig) {
        return PartyApiControllerImplApiFp(this.configuration).v1PartysPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SongApiControllerImplApi - axios parameter creator
 * @export
 */
export const SongApiControllerImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single song
         * @summary Find song by ID
         * @param {string} songId ID of song to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SongSongIdGet: async (songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('v1SongSongIdGet', 'songId', songId)
            const localVarPath = `/v1/song/{songId}`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new song by url
         * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SongsPost: async (coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/songs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsSongCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds Song by search term
         * @param {string} term Search term to serach for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SongsSearchGet: async (term: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('v1SongsSearchGet', 'term', term)
            const localVarPath = `/v1/songs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SongApiControllerImplApi - functional programming interface
 * @export
 */
export const SongApiControllerImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SongApiControllerImplApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single song
         * @summary Find song by ID
         * @param {string} songId ID of song to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SongSongIdGet(songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsSong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SongSongIdGet(songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a new song by url
         * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SongsPost(coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SongsPost(coflnetSongVoterModelsSongCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds Song by search term
         * @param {string} term Search term to serach for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SongsSearchGet(term: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoflnetSongVoterModelsSong>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SongsSearchGet(term, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SongApiControllerImplApi - factory interface
 * @export
 */
export const SongApiControllerImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SongApiControllerImplApiFp(configuration)
    return {
        /**
         * Returns a single song
         * @summary Find song by ID
         * @param {string} songId ID of song to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SongSongIdGet(songId: string, options?: any): AxiosPromise<CoflnetSongVoterModelsSong> {
            return localVarFp.v1SongSongIdGet(songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new song by url
         * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SongsPost(coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options?: any): AxiosPromise<void> {
            return localVarFp.v1SongsPost(coflnetSongVoterModelsSongCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds Song by search term
         * @param {string} term Search term to serach for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SongsSearchGet(term: string, options?: any): AxiosPromise<Array<CoflnetSongVoterModelsSong>> {
            return localVarFp.v1SongsSearchGet(term, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SongApiControllerImplApi - object-oriented interface
 * @export
 * @class SongApiControllerImplApi
 * @extends {BaseAPI}
 */
export class SongApiControllerImplApi extends BaseAPI {
    /**
     * Returns a single song
     * @summary Find song by ID
     * @param {string} songId ID of song to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiControllerImplApi
     */
    public v1SongSongIdGet(songId: string, options?: AxiosRequestConfig) {
        return SongApiControllerImplApiFp(this.configuration).v1SongSongIdGet(songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new song by url
     * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiControllerImplApi
     */
    public v1SongsPost(coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options?: AxiosRequestConfig) {
        return SongApiControllerImplApiFp(this.configuration).v1SongsPost(coflnetSongVoterModelsSongCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds Song by search term
     * @param {string} term Search term to serach for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiControllerImplApi
     */
    public v1SongsSearchGet(term: string, options?: AxiosRequestConfig) {
        return SongApiControllerImplApiFp(this.configuration).v1SongsSearchGet(term, options).then((request) => request(this.axios, this.basePath));
    }
}


