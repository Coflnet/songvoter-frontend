/* tslint:disable */
/* eslint-disable */
/**
 * Songvoter
 * Songvoter
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Authenticate with google
 * @export
 * @interface CoflnetSongVoterControllersAuthApiControllerImplAuthCode
 */
export interface CoflnetSongVoterControllersAuthApiControllerImplAuthCode {
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterControllersAuthApiControllerImplAuthCode
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterControllersAuthApiControllerImplAuthCode
     */
    'redirectUri'?: string | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterMiddlewareApiException
 */
export interface CoflnetSongVoterMiddlewareApiException {
    /**
     * 
     * @type {SystemNetHttpStatusCode}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'statusCode'?: SystemNetHttpStatusCode;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'trace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'message'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'data'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {any}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'innerException'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'helpLink'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'source'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'hResult'?: number;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterMiddlewareApiException
     */
    'stackTrace'?: string | null;
}


/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsAuthRefreshToken
 */
export interface CoflnetSongVoterModelsAuthRefreshToken {
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsAuthRefreshToken
     */
    'token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsAuthRefreshToken
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsAuthRefreshToken
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsAuthToken
 */
export interface CoflnetSongVoterModelsAuthToken {
    /**
     * Gets or Sets Token
     * @type {string}
     * @memberof CoflnetSongVoterModelsAuthToken
     */
    'token'?: string | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsExternalSong
 */
export interface CoflnetSongVoterModelsExternalSong {
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'title'?: string | null;
    /**
     * Gets or Sets Artist
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'artist'?: string | null;
    /**
     * Gets or Sets Thumbnail
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'thumbnail'?: string | null;
    /**
     * Gets or Sets ExternalId
     * @type {string}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'externalId': string;
    /**
     * Gets or Sets the Duration
     * @type {number}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'duration'?: number;
    /**
     * 
     * @type {CoflnetSongVoterModelsSongPlatform}
     * @memberof CoflnetSongVoterModelsExternalSong
     */
    'platform': CoflnetSongVoterModelsSongPlatform;
}


/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsInvite
 */
export interface CoflnetSongVoterModelsInvite {
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsInvite
     */
    'link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsInvite
     */
    'expiration'?: string;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsParty
 */
export interface CoflnetSongVoterModelsParty {
    /**
     * Gets or Sets Id
     * @type {string}
     * @memberof CoflnetSongVoterModelsParty
     */
    'id'?: string | null;
    /**
     * Gets or Sets Name
     * @type {string}
     * @memberof CoflnetSongVoterModelsParty
     */
    'name'?: string | null;
    /**
     * The id of the creator
     * @type {string}
     * @memberof CoflnetSongVoterModelsParty
     */
    'ownerId'?: string | null;
    /**
     * Gets or Sets Members
     * @type {Array<string>}
     * @memberof CoflnetSongVoterModelsParty
     */
    'members'?: Array<string> | null;
    /**
     * Enabled Platforms
     * @type {Array<CoflnetSongVoterModelsSongPlatform>}
     * @memberof CoflnetSongVoterModelsParty
     */
    'platforms'?: Array<CoflnetSongVoterModelsSongPlatform> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsPartyPlaylistEntry
 */
export interface CoflnetSongVoterModelsPartyPlaylistEntry {
    /**
     * 
     * @type {CoflnetSongVoterModelsPartyPlaylistEntrySelfVoteState}
     * @memberof CoflnetSongVoterModelsPartyPlaylistEntry
     */
    'selfVote'?: CoflnetSongVoterModelsPartyPlaylistEntrySelfVoteState;
    /**
     * 
     * @type {CoflnetSongVoterModelsSong}
     * @memberof CoflnetSongVoterModelsPartyPlaylistEntry
     */
    'song'?: CoflnetSongVoterModelsSong;
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterModelsPartyPlaylistEntry
     */
    'upVotes'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoflnetSongVoterModelsPartyPlaylistEntry
     */
    'downVotes'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CoflnetSongVoterModelsPartyPlaylistEntrySelfVoteState = {
    None: 'none',
    Up: 'up',
    Down: 'down'
} as const;

export type CoflnetSongVoterModelsPartyPlaylistEntrySelfVoteState = typeof CoflnetSongVoterModelsPartyPlaylistEntrySelfVoteState[keyof typeof CoflnetSongVoterModelsPartyPlaylistEntrySelfVoteState];


/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsPlayList
 */
export interface CoflnetSongVoterModelsPlayList {
    /**
     * Gets or Sets Id
     * @type {string}
     * @memberof CoflnetSongVoterModelsPlayList
     */
    'id'?: string | null;
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterModelsPlayList
     */
    'title'?: string | null;
    /**
     * Gets or Sets Songs
     * @type {Array<CoflnetSongVoterModelsSong>}
     * @memberof CoflnetSongVoterModelsPlayList
     */
    'songs'?: Array<CoflnetSongVoterModelsSong> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsPlayListCreate
 */
export interface CoflnetSongVoterModelsPlayListCreate {
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterModelsPlayListCreate
     */
    'title'?: string | null;
    /**
     * Gets or Sets Songs
     * @type {Array<string>}
     * @memberof CoflnetSongVoterModelsPlayListCreate
     */
    'songs'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsSong
 */
export interface CoflnetSongVoterModelsSong {
    /**
     * Gets or Sets Id
     * @type {string}
     * @memberof CoflnetSongVoterModelsSong
     */
    'id'?: string | null;
    /**
     * Gets or Sets Title
     * @type {string}
     * @memberof CoflnetSongVoterModelsSong
     */
    'title'?: string | null;
    /**
     * Gets or Sets Occurences
     * @type {Array<CoflnetSongVoterModelsExternalSong>}
     * @memberof CoflnetSongVoterModelsSong
     */
    'occurences'?: Array<CoflnetSongVoterModelsExternalSong> | null;
}
/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsSongCreation
 */
export interface CoflnetSongVoterModelsSongCreation {
    /**
     * Gets or Sets ExternalId
     * @type {string}
     * @memberof CoflnetSongVoterModelsSongCreation
     */
    'externalId'?: string | null;
    /**
     * 
     * @type {CoflnetSongVoterModelsSongPlatform}
     * @memberof CoflnetSongVoterModelsSongCreation
     */
    'platform'?: CoflnetSongVoterModelsSongPlatform;
}


/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsSongId
 */
export interface CoflnetSongVoterModelsSongId {
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsSongId
     */
    'id'?: string | null;
}
/**
 * The platform of this song
 * @export
 * @enum {string}
 */

export const CoflnetSongVoterModelsSongPlatform = {
    Youtube: 'youtube',
    Spotify: 'spotify'
} as const;

export type CoflnetSongVoterModelsSongPlatform = typeof CoflnetSongVoterModelsSongPlatform[keyof typeof CoflnetSongVoterModelsSongPlatform];


/**
 * 
 * @export
 * @interface CoflnetSongVoterModelsUserInfo
 */
export interface CoflnetSongVoterModelsUserInfo {
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsUserInfo
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsUserInfo
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsUserInfo
     */
    'spotifyToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoflnetSongVoterModelsUserInfo
     */
    'spotifyTokenExpiration'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SystemNetHttpStatusCode = {
    Continue: 'continue',
    SwitchingProtocols: 'switchingProtocols',
    Processing: 'processing',
    EarlyHints: 'earlyHints',
    Ok: 'ok',
    Created: 'created',
    Accepted: 'accepted',
    NonAuthoritativeInformation: 'nonAuthoritativeInformation',
    NoContent: 'noContent',
    ResetContent: 'resetContent',
    PartialContent: 'partialContent',
    MultiStatus: 'multiStatus',
    AlreadyReported: 'alreadyReported',
    ImUsed: 'imUsed',
    Ambiguous: 'ambiguous',
    Moved: 'moved',
    Redirect: 'redirect',
    RedirectMethod: 'redirectMethod',
    NotModified: 'notModified',
    UseProxy: 'useProxy',
    Unused: 'unused',
    TemporaryRedirect: 'temporaryRedirect',
    PermanentRedirect: 'permanentRedirect',
    BadRequest: 'badRequest',
    Unauthorized: 'unauthorized',
    PaymentRequired: 'paymentRequired',
    Forbidden: 'forbidden',
    NotFound: 'notFound',
    MethodNotAllowed: 'methodNotAllowed',
    NotAcceptable: 'notAcceptable',
    ProxyAuthenticationRequired: 'proxyAuthenticationRequired',
    RequestTimeout: 'requestTimeout',
    Conflict: 'conflict',
    Gone: 'gone',
    LengthRequired: 'lengthRequired',
    PreconditionFailed: 'preconditionFailed',
    RequestEntityTooLarge: 'requestEntityTooLarge',
    RequestUriTooLong: 'requestUriTooLong',
    UnsupportedMediaType: 'unsupportedMediaType',
    RequestedRangeNotSatisfiable: 'requestedRangeNotSatisfiable',
    ExpectationFailed: 'expectationFailed',
    MisdirectedRequest: 'misdirectedRequest',
    UnprocessableEntity: 'unprocessableEntity',
    Locked: 'locked',
    FailedDependency: 'failedDependency',
    UpgradeRequired: 'upgradeRequired',
    PreconditionRequired: 'preconditionRequired',
    TooManyRequests: 'tooManyRequests',
    RequestHeaderFieldsTooLarge: 'requestHeaderFieldsTooLarge',
    UnavailableForLegalReasons: 'unavailableForLegalReasons',
    InternalServerError: 'internalServerError',
    NotImplemented: 'notImplemented',
    BadGateway: 'badGateway',
    ServiceUnavailable: 'serviceUnavailable',
    GatewayTimeout: 'gatewayTimeout',
    HttpVersionNotSupported: 'httpVersionNotSupported',
    VariantAlsoNegotiates: 'variantAlsoNegotiates',
    InsufficientStorage: 'insufficientStorage',
    LoopDetected: 'loopDetected',
    NotExtended: 'notExtended',
    NetworkAuthenticationRequired: 'networkAuthenticationRequired'
} as const;

export type SystemNetHttpStatusCode = typeof SystemNetHttpStatusCode[keyof typeof SystemNetHttpStatusCode];



/**
 * AuthApiControllerImplApi - axios parameter creator
 * @export
 */
export const AuthApiControllerImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign in with anonymous user
         * @param {string} [nonce] client choosen identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthAnonymousPost: async (nonce?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/anonymous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stores google auth token server side
         * @param {CoflnetSongVoterModelsAuthRefreshToken} [coflnetSongVoterModelsAuthRefreshToken] The google refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGooglePost: async (coflnetSongVoterModelsAuthRefreshToken?: CoflnetSongVoterModelsAuthRefreshToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthRefreshToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoflnetSongVoterControllersAuthApiControllerImplAuthCode} [coflnetSongVoterControllersAuthApiControllerImplAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSpotifyCodePost: async (coflnetSongVoterControllersAuthApiControllerImplAuthCode?: CoflnetSongVoterControllersAuthApiControllerImplAuthCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/spotify/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterControllersAuthApiControllerImplAuthCode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTestPost: async (coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbDelete: async (coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbPost: async (coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsAuthToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApiControllerImplApi - functional programming interface
 * @export
 */
export const AuthApiControllerImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiControllerImplApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign in with anonymous user
         * @param {string} [nonce] client choosen identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthAnonymousPost(nonce?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsAuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthAnonymousPost(nonce, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stores google auth token server side
         * @param {CoflnetSongVoterModelsAuthRefreshToken} [coflnetSongVoterModelsAuthRefreshToken] The google refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthGooglePost(coflnetSongVoterModelsAuthRefreshToken?: CoflnetSongVoterModelsAuthRefreshToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsAuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthGooglePost(coflnetSongVoterModelsAuthRefreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoflnetSongVoterControllersAuthApiControllerImplAuthCode} [coflnetSongVoterControllersAuthApiControllerImplAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthSpotifyCodePost(coflnetSongVoterControllersAuthApiControllerImplAuthCode?: CoflnetSongVoterControllersAuthApiControllerImplAuthCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsAuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthSpotifyCodePost(coflnetSongVoterControllersAuthApiControllerImplAuthCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthTestPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthTestPost(coflnetSongVoterModelsAuthToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbDelete(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbDelete(coflnetSongVoterModelsAuthToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbPost(coflnetSongVoterModelsAuthToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApiControllerImplApi - factory interface
 * @export
 */
export const AuthApiControllerImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiControllerImplApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign in with anonymous user
         * @param {string} [nonce] client choosen identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthAnonymousPost(nonce?: string, options?: any): AxiosPromise<CoflnetSongVoterModelsAuthToken> {
            return localVarFp.apiAuthAnonymousPost(nonce, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stores google auth token server side
         * @param {CoflnetSongVoterModelsAuthRefreshToken} [coflnetSongVoterModelsAuthRefreshToken] The google refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGooglePost(coflnetSongVoterModelsAuthRefreshToken?: CoflnetSongVoterModelsAuthRefreshToken, options?: any): AxiosPromise<CoflnetSongVoterModelsAuthToken> {
            return localVarFp.apiAuthGooglePost(coflnetSongVoterModelsAuthRefreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoflnetSongVoterControllersAuthApiControllerImplAuthCode} [coflnetSongVoterControllersAuthApiControllerImplAuthCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthSpotifyCodePost(coflnetSongVoterControllersAuthApiControllerImplAuthCode?: CoflnetSongVoterControllersAuthApiControllerImplAuthCode, options?: any): AxiosPromise<CoflnetSongVoterModelsAuthToken> {
            return localVarFp.apiAuthSpotifyCodePost(coflnetSongVoterControllersAuthApiControllerImplAuthCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTestPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthTestPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbDelete(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: any): AxiosPromise<void> {
            return localVarFp.dbDelete(coflnetSongVoterModelsAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: any): AxiosPromise<void> {
            return localVarFp.dbPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApiControllerImplApi - object-oriented interface
 * @export
 * @class AuthApiControllerImplApi
 * @extends {BaseAPI}
 */
export class AuthApiControllerImplApi extends BaseAPI {
    /**
     * 
     * @summary Sign in with anonymous user
     * @param {string} [nonce] client choosen identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public apiAuthAnonymousPost(nonce?: string, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).apiAuthAnonymousPost(nonce, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stores google auth token server side
     * @param {CoflnetSongVoterModelsAuthRefreshToken} [coflnetSongVoterModelsAuthRefreshToken] The google refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public apiAuthGooglePost(coflnetSongVoterModelsAuthRefreshToken?: CoflnetSongVoterModelsAuthRefreshToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).apiAuthGooglePost(coflnetSongVoterModelsAuthRefreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoflnetSongVoterControllersAuthApiControllerImplAuthCode} [coflnetSongVoterControllersAuthApiControllerImplAuthCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public apiAuthSpotifyCodePost(coflnetSongVoterControllersAuthApiControllerImplAuthCode?: CoflnetSongVoterControllersAuthApiControllerImplAuthCode, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).apiAuthSpotifyCodePost(coflnetSongVoterControllersAuthApiControllerImplAuthCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public apiAuthTestPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).apiAuthTestPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public dbDelete(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).dbDelete(coflnetSongVoterModelsAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoflnetSongVoterModelsAuthToken} [coflnetSongVoterModelsAuthToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiControllerImplApi
     */
    public dbPost(coflnetSongVoterModelsAuthToken?: CoflnetSongVoterModelsAuthToken, options?: AxiosRequestConfig) {
        return AuthApiControllerImplApiFp(this.configuration).dbPost(coflnetSongVoterModelsAuthToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ListApiControllerImplApi - axios parameter creator
 * @export
 */
export const ListApiControllerImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get playlist for active user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a playList
         * @summary Find playlist by ID
         * @param {string} listId ID of list to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsListIdGet: async (listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('apiListsListIdGet', 'listId', listId)
            const localVarPath = `/api/lists/{listId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a song to a playlist
         * @param {string} listId 
         * @param {CoflnetSongVoterModelsSongId} [coflnetSongVoterModelsSongId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsListIdSongsPost: async (listId: string, coflnetSongVoterModelsSongId?: CoflnetSongVoterModelsSongId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('apiListsListIdSongsPost', 'listId', listId)
            const localVarPath = `/api/lists/{listId}/songs`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsSongId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a song from a playlist
         * @param {string} listId 
         * @param {string} songId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsListIdSongsSongIdDelete: async (listId: string, songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('apiListsListIdSongsSongIdDelete', 'listId', listId)
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('apiListsListIdSongsSongIdDelete', 'songId', songId)
            const localVarPath = `/api/lists/{listId}/songs/{songId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new playlist
         * @param {CoflnetSongVoterModelsPlayListCreate} [coflnetSongVoterModelsPlayListCreate] An array of songIds to be added to the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsPost: async (coflnetSongVoterModelsPlayListCreate?: CoflnetSongVoterModelsPlayListCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsPlayListCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListApiControllerImplApi - functional programming interface
 * @export
 */
export const ListApiControllerImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListApiControllerImplApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get playlist for active user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoflnetSongVoterModelsPlayList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a playList
         * @summary Find playlist by ID
         * @param {string} listId ID of list to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListsListIdGet(listId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsPlayList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListsListIdGet(listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds a song to a playlist
         * @param {string} listId 
         * @param {CoflnetSongVoterModelsSongId} [coflnetSongVoterModelsSongId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListsListIdSongsPost(listId: string, coflnetSongVoterModelsSongId?: CoflnetSongVoterModelsSongId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsPlayList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListsListIdSongsPost(listId, coflnetSongVoterModelsSongId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Removes a song from a playlist
         * @param {string} listId 
         * @param {string} songId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListsListIdSongsSongIdDelete(listId: string, songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsPlayList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListsListIdSongsSongIdDelete(listId, songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new playlist
         * @param {CoflnetSongVoterModelsPlayListCreate} [coflnetSongVoterModelsPlayListCreate] An array of songIds to be added to the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListsPost(coflnetSongVoterModelsPlayListCreate?: CoflnetSongVoterModelsPlayListCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsPlayList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListsPost(coflnetSongVoterModelsPlayListCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListApiControllerImplApi - factory interface
 * @export
 */
export const ListApiControllerImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListApiControllerImplApiFp(configuration)
    return {
        /**
         * 
         * @summary Get playlist for active user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsGet(options?: any): AxiosPromise<Array<CoflnetSongVoterModelsPlayList>> {
            return localVarFp.apiListsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a playList
         * @summary Find playlist by ID
         * @param {string} listId ID of list to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsListIdGet(listId: string, options?: any): AxiosPromise<CoflnetSongVoterModelsPlayList> {
            return localVarFp.apiListsListIdGet(listId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a song to a playlist
         * @param {string} listId 
         * @param {CoflnetSongVoterModelsSongId} [coflnetSongVoterModelsSongId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsListIdSongsPost(listId: string, coflnetSongVoterModelsSongId?: CoflnetSongVoterModelsSongId, options?: any): AxiosPromise<CoflnetSongVoterModelsPlayList> {
            return localVarFp.apiListsListIdSongsPost(listId, coflnetSongVoterModelsSongId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a song from a playlist
         * @param {string} listId 
         * @param {string} songId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsListIdSongsSongIdDelete(listId: string, songId: string, options?: any): AxiosPromise<CoflnetSongVoterModelsPlayList> {
            return localVarFp.apiListsListIdSongsSongIdDelete(listId, songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new playlist
         * @param {CoflnetSongVoterModelsPlayListCreate} [coflnetSongVoterModelsPlayListCreate] An array of songIds to be added to the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListsPost(coflnetSongVoterModelsPlayListCreate?: CoflnetSongVoterModelsPlayListCreate, options?: any): AxiosPromise<CoflnetSongVoterModelsPlayList> {
            return localVarFp.apiListsPost(coflnetSongVoterModelsPlayListCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListApiControllerImplApi - object-oriented interface
 * @export
 * @class ListApiControllerImplApi
 * @extends {BaseAPI}
 */
export class ListApiControllerImplApi extends BaseAPI {
    /**
     * 
     * @summary Get playlist for active user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public apiListsGet(options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).apiListsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a playList
     * @summary Find playlist by ID
     * @param {string} listId ID of list to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public apiListsListIdGet(listId: string, options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).apiListsListIdGet(listId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a song to a playlist
     * @param {string} listId 
     * @param {CoflnetSongVoterModelsSongId} [coflnetSongVoterModelsSongId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public apiListsListIdSongsPost(listId: string, coflnetSongVoterModelsSongId?: CoflnetSongVoterModelsSongId, options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).apiListsListIdSongsPost(listId, coflnetSongVoterModelsSongId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a song from a playlist
     * @param {string} listId 
     * @param {string} songId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public apiListsListIdSongsSongIdDelete(listId: string, songId: string, options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).apiListsListIdSongsSongIdDelete(listId, songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new playlist
     * @param {CoflnetSongVoterModelsPlayListCreate} [coflnetSongVoterModelsPlayListCreate] An array of songIds to be added to the song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiControllerImplApi
     */
    public apiListsPost(coflnetSongVoterModelsPlayListCreate?: CoflnetSongVoterModelsPlayListCreate, options?: AxiosRequestConfig) {
        return ListApiControllerImplApiFp(this.configuration).apiListsPost(coflnetSongVoterModelsPlayListCreate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PartyApi - axios parameter creator
 * @export
 */
export const PartyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary votes a song down so it is play later/not at all
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyDownvoteSongIdPost: async (songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('apiPartyDownvoteSongIdPost', 'songId', songId)
            const localVarPath = `/api/party/downvote/{songId}`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all parties of the curent user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/party`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Joins a party
         * @param {string} inviteId ID of the invite link to join a party with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyInviteIdJoinPost: async (inviteId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteId' is not null or undefined
            assertParamExists('apiPartyInviteIdJoinPost', 'inviteId', inviteId)
            const localVarPath = `/api/party/{inviteId}/join`
                .replace(`{${"inviteId"}}`, encodeURIComponent(String(inviteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an invite link for a party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyInviteLinkGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/party/inviteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invites a user to a party
         * @param {string} partyId ID of party to invite to
         * @param {string} userId ID of user to invite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyInviteUserIdPost: async (partyId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('apiPartyInviteUserIdPost', 'partyId', partyId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiPartyInviteUserIdPost', 'userId', userId)
            const localVarPath = `/api/party/invite/{userId}`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary kicks a user from a party
         * @param {string} userId ID of user to kick
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyKickUserIdPost: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiPartyKickUserIdPost', 'userId', userId)
            const localVarPath = `/api/party/kick/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave a party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyLeavePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/party/leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets the next Song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyNextSongGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/party/nextSong`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resets the parties playing state
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyPartyIdResetPost: async (partyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partyId' is not null or undefined
            assertParamExists('apiPartyPartyIdResetPost', 'partyId', partyId)
            const localVarPath = `/api/party/{partyId}/reset`
                .replace(`{${"partyId"}}`, encodeURIComponent(String(partyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyPlaylistGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/party/playlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new party
         * @param {string} [name] Name that the party should have
         * @param {Array<CoflnetSongVoterModelsSongPlatform>} [supportedPlatforms] What platforms are supported by this party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyPost: async (name?: string, supportedPlatforms?: Array<CoflnetSongVoterModelsSongPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/party`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (supportedPlatforms) {
                localVarQueryParameter['SupportedPlatforms'] = supportedPlatforms;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove vote from song
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyRemoveVoteSongIdPost: async (songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('apiPartyRemoveVoteSongIdPost', 'songId', songId)
            const localVarPath = `/api/party/removeVote/{songId}`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Marks a song as played
         * @param {string} songId ID of song to mark
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartySongSongIdPlayedPost: async (songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('apiPartySongSongIdPlayedPost', 'songId', songId)
            const localVarPath = `/api/party/song/{songId}/played`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
         * @summary votes a song up so it is play sooner
         * @param {string} songId ID of the song to upvote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyUpvoteSongIdPost: async (songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('apiPartyUpvoteSongIdPost', 'songId', songId)
            const localVarPath = `/api/party/upvote/{songId}`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartyApi - functional programming interface
 * @export
 */
export const PartyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary votes a song down so it is play later/not at all
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyDownvoteSongIdPost(songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyDownvoteSongIdPost(songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all parties of the curent user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Joins a party
         * @param {string} inviteId ID of the invite link to join a party with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyInviteIdJoinPost(inviteId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyInviteIdJoinPost(inviteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates an invite link for a party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyInviteLinkGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsInvite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyInviteLinkGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invites a user to a party
         * @param {string} partyId ID of party to invite to
         * @param {string} userId ID of user to invite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyInviteUserIdPost(partyId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyInviteUserIdPost(partyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary kicks a user from a party
         * @param {string} userId ID of user to kick
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyKickUserIdPost(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyKickUserIdPost(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leave a party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyLeavePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyLeavePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary gets the next Song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyNextSongGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsSong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyNextSongGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary resets the parties playing state
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyPartyIdResetPost(partyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyPartyIdResetPost(partyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyPlaylistGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoflnetSongVoterModelsPartyPlaylistEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyPlaylistGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new party
         * @param {string} [name] Name that the party should have
         * @param {Array<CoflnetSongVoterModelsSongPlatform>} [supportedPlatforms] What platforms are supported by this party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyPost(name?: string, supportedPlatforms?: Array<CoflnetSongVoterModelsSongPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsParty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyPost(name, supportedPlatforms, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove vote from song
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyRemoveVoteSongIdPost(songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyRemoveVoteSongIdPost(songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Marks a song as played
         * @param {string} songId ID of song to mark
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartySongSongIdPlayedPost(songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartySongSongIdPlayedPost(songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
         * @summary votes a song up so it is play sooner
         * @param {string} songId ID of the song to upvote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPartyUpvoteSongIdPost(songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPartyUpvoteSongIdPost(songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartyApi - factory interface
 * @export
 */
export const PartyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartyApiFp(configuration)
    return {
        /**
         * 
         * @summary votes a song down so it is play later/not at all
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyDownvoteSongIdPost(songId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyDownvoteSongIdPost(songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all parties of the curent user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyGet(options?: any): AxiosPromise<CoflnetSongVoterModelsParty> {
            return localVarFp.apiPartyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Joins a party
         * @param {string} inviteId ID of the invite link to join a party with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyInviteIdJoinPost(inviteId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyInviteIdJoinPost(inviteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an invite link for a party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyInviteLinkGet(options?: any): AxiosPromise<CoflnetSongVoterModelsInvite> {
            return localVarFp.apiPartyInviteLinkGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invites a user to a party
         * @param {string} partyId ID of party to invite to
         * @param {string} userId ID of user to invite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyInviteUserIdPost(partyId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyInviteUserIdPost(partyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary kicks a user from a party
         * @param {string} userId ID of user to kick
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyKickUserIdPost(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyKickUserIdPost(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave a party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyLeavePost(options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyLeavePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets the next Song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyNextSongGet(options?: any): AxiosPromise<CoflnetSongVoterModelsSong> {
            return localVarFp.apiPartyNextSongGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary resets the parties playing state
         * @param {string} partyId ID of party to invite to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyPartyIdResetPost(partyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyPartyIdResetPost(partyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyPlaylistGet(options?: any): AxiosPromise<Array<CoflnetSongVoterModelsPartyPlaylistEntry>> {
            return localVarFp.apiPartyPlaylistGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new party
         * @param {string} [name] Name that the party should have
         * @param {Array<CoflnetSongVoterModelsSongPlatform>} [supportedPlatforms] What platforms are supported by this party
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyPost(name?: string, supportedPlatforms?: Array<CoflnetSongVoterModelsSongPlatform>, options?: any): AxiosPromise<CoflnetSongVoterModelsParty> {
            return localVarFp.apiPartyPost(name, supportedPlatforms, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove vote from song
         * @param {string} songId ID of the song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyRemoveVoteSongIdPost(songId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyRemoveVoteSongIdPost(songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Marks a song as played
         * @param {string} songId ID of song to mark
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartySongSongIdPlayedPost(songId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartySongSongIdPlayedPost(songId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
         * @summary votes a song up so it is play sooner
         * @param {string} songId ID of the song to upvote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPartyUpvoteSongIdPost(songId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPartyUpvoteSongIdPost(songId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartyApi - object-oriented interface
 * @export
 * @class PartyApi
 * @extends {BaseAPI}
 */
export class PartyApi extends BaseAPI {
    /**
     * 
     * @summary votes a song down so it is play later/not at all
     * @param {string} songId ID of the song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyDownvoteSongIdPost(songId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyDownvoteSongIdPost(songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all parties of the curent user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyGet(options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Joins a party
     * @param {string} inviteId ID of the invite link to join a party with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyInviteIdJoinPost(inviteId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyInviteIdJoinPost(inviteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an invite link for a party
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyInviteLinkGet(options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyInviteLinkGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invites a user to a party
     * @param {string} partyId ID of party to invite to
     * @param {string} userId ID of user to invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyInviteUserIdPost(partyId: string, userId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyInviteUserIdPost(partyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary kicks a user from a party
     * @param {string} userId ID of user to kick
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyKickUserIdPost(userId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyKickUserIdPost(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave a party
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyLeavePost(options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyLeavePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary gets the next Song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyNextSongGet(options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyNextSongGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary resets the parties playing state
     * @param {string} partyId ID of party to invite to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyPartyIdResetPost(partyId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyPartyIdResetPost(partyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyPlaylistGet(options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyPlaylistGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new party
     * @param {string} [name] Name that the party should have
     * @param {Array<CoflnetSongVoterModelsSongPlatform>} [supportedPlatforms] What platforms are supported by this party
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyPost(name?: string, supportedPlatforms?: Array<CoflnetSongVoterModelsSongPlatform>, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyPost(name, supportedPlatforms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove vote from song
     * @param {string} songId ID of the song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyRemoveVoteSongIdPost(songId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyRemoveVoteSongIdPost(songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Marks a song as played
     * @param {string} songId ID of song to mark
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartySongSongIdPlayedPost(songId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartySongSongIdPlayedPost(songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
     * @summary votes a song up so it is play sooner
     * @param {string} songId ID of the song to upvote
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public apiPartyUpvoteSongIdPost(songId: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).apiPartyUpvoteSongIdPost(songId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SongApiApi - axios parameter creator
 * @export
 */
export const SongApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new song by url
         * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSongsPost: async (coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/songs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coflnetSongVoterModelsSongCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds Song by search term
         * @param {string} term Search term to serach for
         * @param {Array<CoflnetSongVoterModelsSongPlatform>} [platforms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSongsSearchGet: async (term: string, platforms?: Array<CoflnetSongVoterModelsSongPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('apiSongsSearchGet', 'term', term)
            const localVarPath = `/api/songs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (platforms) {
                localVarQueryParameter['platforms'] = platforms;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single song
         * @summary Find song by ID
         * @param {string} songId ID of song to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSongsSongIdGet: async (songId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('apiSongsSongIdGet', 'songId', songId)
            const localVarPath = `/api/songs/{songId}`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SongApiApi - functional programming interface
 * @export
 */
export const SongApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SongApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new song by url
         * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSongsPost(coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSongsPost(coflnetSongVoterModelsSongCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds Song by search term
         * @param {string} term Search term to serach for
         * @param {Array<CoflnetSongVoterModelsSongPlatform>} [platforms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSongsSearchGet(term: string, platforms?: Array<CoflnetSongVoterModelsSongPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoflnetSongVoterModelsSong>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSongsSearchGet(term, platforms, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single song
         * @summary Find song by ID
         * @param {string} songId ID of song to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSongsSongIdGet(songId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsSong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSongsSongIdGet(songId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SongApiApi - factory interface
 * @export
 */
export const SongApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SongApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new song by url
         * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSongsPost(coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options?: any): AxiosPromise<void> {
            return localVarFp.apiSongsPost(coflnetSongVoterModelsSongCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds Song by search term
         * @param {string} term Search term to serach for
         * @param {Array<CoflnetSongVoterModelsSongPlatform>} [platforms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSongsSearchGet(term: string, platforms?: Array<CoflnetSongVoterModelsSongPlatform>, options?: any): AxiosPromise<Array<CoflnetSongVoterModelsSong>> {
            return localVarFp.apiSongsSearchGet(term, platforms, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single song
         * @summary Find song by ID
         * @param {string} songId ID of song to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSongsSongIdGet(songId: string, options?: any): AxiosPromise<CoflnetSongVoterModelsSong> {
            return localVarFp.apiSongsSongIdGet(songId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SongApiApi - object-oriented interface
 * @export
 * @class SongApiApi
 * @extends {BaseAPI}
 */
export class SongApiApi extends BaseAPI {
    /**
     * 
     * @summary Add a new song by url
     * @param {CoflnetSongVoterModelsSongCreation} [coflnetSongVoterModelsSongCreation] Song object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiApi
     */
    public apiSongsPost(coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation, options?: AxiosRequestConfig) {
        return SongApiApiFp(this.configuration).apiSongsPost(coflnetSongVoterModelsSongCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds Song by search term
     * @param {string} term Search term to serach for
     * @param {Array<CoflnetSongVoterModelsSongPlatform>} [platforms] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiApi
     */
    public apiSongsSearchGet(term: string, platforms?: Array<CoflnetSongVoterModelsSongPlatform>, options?: AxiosRequestConfig) {
        return SongApiApiFp(this.configuration).apiSongsSearchGet(term, platforms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single song
     * @summary Find song by ID
     * @param {string} songId ID of song to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiApi
     */
    public apiSongsSongIdGet(songId: string, options?: AxiosRequestConfig) {
        return SongApiApiFp(this.configuration).apiSongsSongIdGet(songId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the display name of the current user
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserNamePost: async (body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiUserNamePost', 'body', body)
            const localVarPath = `/api/user/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disconnects spotify from the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSpotifyDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/spotify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns spotify access token to control music playback client side
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSpotifyTokenGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/spotify/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsUserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the display name of the current user
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserNamePost(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserNamePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disconnects spotify from the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserSpotifyDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoflnetSongVoterModelsUserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserSpotifyDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns spotify access token to control music playback client side
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserSpotifyTokenGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserSpotifyTokenGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserInfoGet(options?: any): AxiosPromise<CoflnetSongVoterModelsUserInfo> {
            return localVarFp.apiUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the display name of the current user
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserNamePost(body: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUserNamePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disconnects spotify from the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSpotifyDelete(options?: any): AxiosPromise<CoflnetSongVoterModelsUserInfo> {
            return localVarFp.apiUserSpotifyDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns spotify access token to control music playback client side
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSpotifyTokenGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiUserSpotifyTokenGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserInfoGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the display name of the current user
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserNamePost(body: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserNamePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disconnects spotify from the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserSpotifyDelete(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserSpotifyDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns spotify access token to control music playback client side
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserSpotifyTokenGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserSpotifyTokenGet(options).then((request) => request(this.axios, this.basePath));
    }
}


