/* tslint:disable */
/* eslint-disable */
/**
 * Songvoter
 * Songvoter
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoflnetSongVoterDBModelsParty,
  CoflnetSongVoterDBModelsSong,
} from '../models';
import {
    CoflnetSongVoterDBModelsPartyFromJSON,
    CoflnetSongVoterDBModelsPartyToJSON,
    CoflnetSongVoterDBModelsSongFromJSON,
    CoflnetSongVoterDBModelsSongToJSON,
} from '../models';

export interface V1PartyPartyIdDownvoteSongIdPostRequest {
    partyId: string;
    songId: string;
}

export interface V1PartyPartyIdInviteLinkGetRequest {
    partyId: string;
}

export interface V1PartyPartyIdInviteUserIdPostRequest {
    partyId: string;
    userId: string;
}

export interface V1PartyPartyIdJoinPostRequest {
    partyId: string;
}

export interface V1PartyPartyIdKickUserIdPostRequest {
    partyId: string;
    userId: string;
}

export interface V1PartyPartyIdLeavePostRequest {
    partyId: string;
}

export interface V1PartyPartyIdNextSongGetRequest {
    partyId: string;
}

export interface V1PartyPartyIdResetPostRequest {
    partyId: string;
}

export interface V1PartyPartyIdUpvoteSongIdPostRequest {
    partyId: string;
    songId: string;
}

/**
 * 
 */
export class PartyApiControllerImplApi extends runtime.BaseAPI {

    /**
     * votes a song down so it is play later/not at all
     */
    async v1PartyPartyIdDownvoteSongIdPostRaw(requestParameters: V1PartyPartyIdDownvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdDownvoteSongIdPost.');
        }

        if (requestParameters.songId === null || requestParameters.songId === undefined) {
            throw new runtime.RequiredError('songId','Required parameter requestParameters.songId was null or undefined when calling v1PartyPartyIdDownvoteSongIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/downvote/{songId}`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))).replace(`{${"songId"}}`, encodeURIComponent(String(requestParameters.songId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * votes a song down so it is play later/not at all
     */
    async v1PartyPartyIdDownvoteSongIdPost(requestParameters: V1PartyPartyIdDownvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PartyPartyIdDownvoteSongIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Creates an invite link for a party
     */
    async v1PartyPartyIdInviteLinkGetRaw(requestParameters: V1PartyPartyIdInviteLinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdInviteLinkGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/inviteLink`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Creates an invite link for a party
     */
    async v1PartyPartyIdInviteLinkGet(requestParameters: V1PartyPartyIdInviteLinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.v1PartyPartyIdInviteLinkGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invites a user to a party
     */
    async v1PartyPartyIdInviteUserIdPostRaw(requestParameters: V1PartyPartyIdInviteUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdInviteUserIdPost.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling v1PartyPartyIdInviteUserIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/invite/{userId}`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invites a user to a party
     */
    async v1PartyPartyIdInviteUserIdPost(requestParameters: V1PartyPartyIdInviteUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PartyPartyIdInviteUserIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Joins a party
     */
    async v1PartyPartyIdJoinPostRaw(requestParameters: V1PartyPartyIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdJoinPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/join`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Joins a party
     */
    async v1PartyPartyIdJoinPost(requestParameters: V1PartyPartyIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PartyPartyIdJoinPostRaw(requestParameters, initOverrides);
    }

    /**
     * kicks a user from a party
     */
    async v1PartyPartyIdKickUserIdPostRaw(requestParameters: V1PartyPartyIdKickUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdKickUserIdPost.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling v1PartyPartyIdKickUserIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/kick/{userId}`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * kicks a user from a party
     */
    async v1PartyPartyIdKickUserIdPost(requestParameters: V1PartyPartyIdKickUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PartyPartyIdKickUserIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Leave a party
     */
    async v1PartyPartyIdLeavePostRaw(requestParameters: V1PartyPartyIdLeavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdLeavePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/leave`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Leave a party
     */
    async v1PartyPartyIdLeavePost(requestParameters: V1PartyPartyIdLeavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PartyPartyIdLeavePostRaw(requestParameters, initOverrides);
    }

    /**
     * gets the next Song
     */
    async v1PartyPartyIdNextSongGetRaw(requestParameters: V1PartyPartyIdNextSongGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoflnetSongVoterDBModelsSong>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdNextSongGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/nextSong`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoflnetSongVoterDBModelsSongFromJSON(jsonValue));
    }

    /**
     * gets the next Song
     */
    async v1PartyPartyIdNextSongGet(requestParameters: V1PartyPartyIdNextSongGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoflnetSongVoterDBModelsSong> {
        const response = await this.v1PartyPartyIdNextSongGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * resets the parties playing state
     */
    async v1PartyPartyIdResetPostRaw(requestParameters: V1PartyPartyIdResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdResetPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/reset`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * resets the parties playing state
     */
    async v1PartyPartyIdResetPost(requestParameters: V1PartyPartyIdResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PartyPartyIdResetPostRaw(requestParameters, initOverrides);
    }

    /**
     * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
     * votes a song up so it is play sooner
     */
    async v1PartyPartyIdUpvoteSongIdPostRaw(requestParameters: V1PartyPartyIdUpvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.partyId === null || requestParameters.partyId === undefined) {
            throw new runtime.RequiredError('partyId','Required parameter requestParameters.partyId was null or undefined when calling v1PartyPartyIdUpvoteSongIdPost.');
        }

        if (requestParameters.songId === null || requestParameters.songId === undefined) {
            throw new runtime.RequiredError('songId','Required parameter requestParameters.songId was null or undefined when calling v1PartyPartyIdUpvoteSongIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/party/{partyId}/upvote/{songId}`.replace(`{${"partyId"}}`, encodeURIComponent(String(requestParameters.partyId))).replace(`{${"songId"}}`, encodeURIComponent(String(requestParameters.songId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds an upvote to an song wich causes it to be played sooner. Also adds new songs to a party
     * votes a song up so it is play sooner
     */
    async v1PartyPartyIdUpvoteSongIdPost(requestParameters: V1PartyPartyIdUpvoteSongIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1PartyPartyIdUpvoteSongIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all parties of the curent user
     */
    async v1PartysGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoflnetSongVoterDBModelsParty>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/partys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoflnetSongVoterDBModelsPartyFromJSON));
    }

    /**
     * Returns all parties of the curent user
     */
    async v1PartysGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoflnetSongVoterDBModelsParty>> {
        const response = await this.v1PartysGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a new party
     */
    async v1PartysPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoflnetSongVoterDBModelsParty>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/partys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoflnetSongVoterDBModelsPartyFromJSON(jsonValue));
    }

    /**
     * Creates a new party
     */
    async v1PartysPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoflnetSongVoterDBModelsParty> {
        const response = await this.v1PartysPostRaw(initOverrides);
        return await response.value();
    }

}
