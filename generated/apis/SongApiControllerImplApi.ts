/* tslint:disable */
/* eslint-disable */
/**
 * Songvoter
 * Songvoter
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@coflnet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoflnetSongVoterModelsSong,
  CoflnetSongVoterModelsSongCreation,
} from '../models';
import {
    CoflnetSongVoterModelsSongFromJSON,
    CoflnetSongVoterModelsSongToJSON,
    CoflnetSongVoterModelsSongCreationFromJSON,
    CoflnetSongVoterModelsSongCreationToJSON,
} from '../models';

export interface V1SongSongIdGetRequest {
    songId: string;
}

export interface V1SongsPostRequest {
    coflnetSongVoterModelsSongCreation?: CoflnetSongVoterModelsSongCreation;
}

export interface V1SongsSearchGetRequest {
    term: string;
}

/**
 * 
 */
export class SongApiControllerImplApi extends runtime.BaseAPI {

    /**
     * Returns a single song
     * Find song by ID
     */
    async v1SongSongIdGetRaw(requestParameters: V1SongSongIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoflnetSongVoterModelsSong>> {
        if (requestParameters.songId === null || requestParameters.songId === undefined) {
            throw new runtime.RequiredError('songId','Required parameter requestParameters.songId was null or undefined when calling v1SongSongIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/song/{songId}`.replace(`{${"songId"}}`, encodeURIComponent(String(requestParameters.songId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoflnetSongVoterModelsSongFromJSON(jsonValue));
    }

    /**
     * Returns a single song
     * Find song by ID
     */
    async v1SongSongIdGet(requestParameters: V1SongSongIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoflnetSongVoterModelsSong> {
        const response = await this.v1SongSongIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new song by url
     */
    async v1SongsPostRaw(requestParameters: V1SongsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/songs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoflnetSongVoterModelsSongCreationToJSON(requestParameters.coflnetSongVoterModelsSongCreation),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new song by url
     */
    async v1SongsPost(requestParameters: V1SongsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1SongsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Finds Song by search term
     */
    async v1SongsSearchGetRaw(requestParameters: V1SongsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoflnetSongVoterModelsSong>>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling v1SongsSearchGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/songs/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoflnetSongVoterModelsSongFromJSON));
    }

    /**
     * Finds Song by search term
     */
    async v1SongsSearchGet(requestParameters: V1SongsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoflnetSongVoterModelsSong>> {
        const response = await this.v1SongsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
